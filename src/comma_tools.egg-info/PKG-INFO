Metadata-Version: 2.4
Name: comma-tools
Version: 0.8.0
Summary: Debugging and analysis tools for openpilot autonomous driving system
Author-email: Dan Mann <dan.b.mann@gmail.com>
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: numpy
Requires-Dist: pycapnp
Requires-Dist: tqdm
Requires-Dist: zstandard
Requires-Dist: pyzmq
Requires-Dist: smbus2
Provides-Extra: plot
Requires-Dist: matplotlib>=3.5.0; extra == "plot"
Provides-Extra: connect
Requires-Dist: requests>=2.25.0; extra == "connect"
Provides-Extra: test
Requires-Dist: pytest>=6.0; extra == "test"
Requires-Dist: pytest-cov; extra == "test"
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: matplotlib>=3.5.0; extra == "dev"
Requires-Dist: requests>=2.25.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=4.0; extra == "docs"
Requires-Dist: sphinx-autodoc-typehints; extra == "docs"
Requires-Dist: furo; extra == "docs"
Requires-Dist: myst-parser; extra == "docs"
Provides-Extra: service
Requires-Dist: fastapi>=0.104.0; extra == "service"
Requires-Dist: uvicorn[standard]>=0.24.0; extra == "service"
Requires-Dist: aiosqlite>=0.19.0; extra == "service"
Requires-Dist: sqlalchemy>=2.0.0; extra == "service"
Requires-Dist: pydantic>=2.0.0; extra == "service"
Requires-Dist: pydantic-settings>=2.0.0; extra == "service"

# Comma Tools
[![Test Suite](https://github.com/anteew/comma-tools/actions/workflows/test.yml/badge.svg)](https://github.com/anteew/comma-tools/actions/workflows/test.yml)

Debugging and analysis tools for the openpilot autonomous driving system.

## Overview

This repository contains a collection of debugging and analysis tools for the openpilot autonomous driving system. The tools are primarily focused on Controller Area Network (CAN) bus analysis, safety system monitoring, and vehicle behavior debugging.

## Quick Start from Source

**ðŸš€ Run tools directly without pip installation!** comma-tools is designed to work seamlessly with custom openpilot forks without requiring system-wide package installation.

```bash
# Clone the repository
git clone https://github.com/anteew/comma-tools.git
cd comma-tools

# Run any tool directly from source
export PYTHONPATH=src

# Get help for any tool
python3 -m comma_tools.analyzers.cruise_control_analyzer --help
python3 -m comma_tools.sources.connect.cli --help
python3 -m comma_tools.analyzers.can_bitwatch --help

# First-time analysis with automatic dependency installation
python3 -m comma_tools.analyzers.cruise_control_analyzer /path/to/logfile.zst --install-missing-deps

# Subsequent runs (dependencies cached locally)
python3 -m comma_tools.analyzers.cruise_control_analyzer /path/to/logfile.zst
```

**Why no pip install required?**
- **Custom openpilot compatibility**: Works with your modified openpilot fork automatically
- **Local dependencies**: Downloads packages to `comma-depends/` directory, not system-wide
- **Zero conflicts**: No interference with existing Python environments

## Installation (Alternative)

```bash
# Clone the repository
git clone https://github.com/anteew/comma-tools.git
cd comma-tools

# Install in development mode
pip install -e .

# Or install with development dependencies
pip install -e ".[dev]"
```

## Tools

### Analyzers
- **Cruise Control Analyzer** (`cruise-control-analyzer`): Deep analysis of recorded driving logs (`rlog.zst` files) with focus on Subaru vehicle cruise control systems
- **RLog to CSV** (`rlog-to-csv`): Convert openpilot rlog.zst files to CSV format for analysis
- **CAN Bitwatch** (`can-bitwatch`): Analyze CAN CSV data for bit patterns, edge detection, and pulse sequences

### Monitors
- **Hybrid RX Trace** (`hybrid_rx_trace.py`): Real-time monitoring of Panda safety states
- **Panda State** (`panda-state.py`): General Panda device status reporting  
- **CAN Bus Check** (`can_bus_check.py`): General CAN message frequency analysis
- **CAN Hybrid RX Check** (`can_hybrid_rx_check.py`): Subaru hybrid-specific signal monitoring

### Utilities
- **Simple Panda** (`simple-panda.py`): Basic Panda health check utility

### Scripts
- Various shell script wrappers for common operations

## Usage

### Cruise Control Analyzer

**From source (recommended):**
```bash
export PYTHONPATH=src

# First run - installs dependencies locally
python3 -m comma_tools.analyzers.cruise_control_analyzer /path/to/logfile.zst --install-missing-deps

# Subsequent runs
python3 -m comma_tools.analyzers.cruise_control_analyzer /path/to/logfile.zst

# With custom speed range
python3 -m comma_tools.analyzers.cruise_control_analyzer /path/to/logfile.zst --speed-min 50 --speed-max 60
```

**Or if installed via pip:**
```bash
cruise-control-analyzer /path/to/logfile.zst --install-missing-deps
```

### CAN Analysis Tools

```bash
export PYTHONPATH=src

# Convert rlog to CSV for analysis
python3 -m comma_tools.analyzers.rlog_to_csv --rlog /path/to/logfile.zst --out output.csv --window-start 100.0 --window-dur 30.0

# Analyze CAN bit patterns
python3 -m comma_tools.analyzers.can_bitwatch --csv output.csv --output-prefix analysis/results --watch 0x027:B4b5 0x321:B5b1
```

### Real-time Monitoring

```bash
export PYTHONPATH=src

# Monitor Panda safety states (requires Panda device)
python3 -m comma_tools.monitors.hybrid_rx_trace

# Check CAN bus activity (requires Panda device)
python3 -m comma_tools.monitors.can_bus_check
```

### Download logs from Connect

The connect downloader downloads log files directly from connect.comma.ai with resume capability and idempotent behavior.

**From source (recommended):**
```bash
export PYTHONPATH=src

# Download logs using a connect URL
python3 -m comma_tools.sources.connect.cli --url https://connect.comma.ai/dcb4c2e18426be55/00000008--0696c823fa --logs --cameras

# Download using canonical route name
python3 -m comma_tools.sources.connect.cli --route dcb4c2e18426be55|2024-04-19--12-33-20 --logs --dest ./my-logs

# Download all file types with custom settings
python3 -m comma_tools.sources.connect.cli --url https://connect.comma.ai/... --logs --qlogs --cameras --parallel 8 --verbose

# Dry run to see what would be downloaded
python3 -m comma_tools.sources.connect.cli --route dcb4c2e18426be55|2024-04-19--12-33-20 --logs --dry-run
```

**Or if installed via pip:**
```bash
comma-connect-dl --route dcb4c2e18426be55|2024-04-19--12-33-20 --logs --dest ./my-logs
```

**Authentication:** Requires JWT token via `COMMA_JWT` environment variable or `~/.comma/auth.json` file (created by `openpilot/tools/lib/auth.py`).

**File Layout:** Downloads are organized as `<dest>/<dongle_id>/<YYYY-MM-DD--HH-MM-SS>/<segment>/<filename>` for compatibility with existing analyzers.

**Note:** Log retention is 3 days (1 year with comma prime). Connect URLs are resolved by searching device segments within a configurable time window (default 7 days).

## Dependency Management

comma-tools uses a sophisticated **pip-free dependency system** designed for compatibility with custom openpilot forks:

### How it works:
- **Automatic openpilot discovery**: Finds your openpilot fork automatically (expects `openpilot/` directory alongside `comma-tools/`)
- **Local dependency installation**: `--install-missing-deps` downloads packages to `comma-depends/` directory only
- **Dynamic path management**: Adds dependencies to Python path at runtime without system-wide installation
- **Zero pip conflicts**: Works in any Python environment without affecting system packages

### Troubleshooting:
```bash
# If openpilot isn't found automatically
python3 -m comma_tools.analyzers.cruise_control_analyzer logfile.zst --repo-root /path/to/parent-directory

# Force dependency reinstall
rm -rf comma-depends/
python3 -m comma_tools.analyzers.cruise_control_analyzer logfile.zst --install-missing-deps

# Check what dependencies would be installed
python3 -m comma_tools.analyzers.cruise_control_analyzer --help
```

### Expected directory structure:
```
parent-directory/
â”œâ”€â”€ openpilot/          # Your custom openpilot fork
â””â”€â”€ comma-tools/        # This repository
    â”œâ”€â”€ comma-depends/  # Auto-created for local packages
    â””â”€â”€ src/            # Source code
```

## Development

```bash
# Install development dependencies
pip install -e ".[dev]"

# Run tests
pytest

# Format code
black src/ tests/

# Type checking
mypy src/
```

### Documentation

The documentation is built using [Sphinx](https://www.sphinx-doc.org/) from reStructuredText source files:

```bash
# Install documentation dependencies
pip install -e ".[docs]"

# Build HTML documentation
cd docs/
make html

# Serve documentation locally at http://localhost:8000
make serve
```

The source files (`.rst`) in `docs/` are converted to HTML in `docs/_build/html/`. See `docs/README.md` for more details.

## Project Structure

```
comma-tools/
â”œâ”€â”€ src/comma_tools/           # Main package
â”‚   â”œâ”€â”€ analyzers/            # Log analysis tools
â”‚   â”œâ”€â”€ monitors/             # Real-time monitoring
â”‚   â””â”€â”€ utils/                # Shared utilities
â”œâ”€â”€ tests/                    # Test suite
â”œâ”€â”€ scripts/                  # Shell script wrappers
â””â”€â”€ docs/                     # Documentation
```

## Requirements

- Python 3.12
- openpilot installation (for some tools)
- Panda device (for real-time monitoring tools)
## Integration tests with a real rlog.zst

By default, the repo includes a known-good real log fixture stored via Git LFS:
- Path: `tests/data/known_good.rlog.zst`
- CI and local runs will use this fixture automatically for integration tests.

Override the fixture with your own log if desired:

Option A: environment variable
```bash
LOG_FILE=/absolute/path/to/your.rlog.zst pytest tests/integration -v -m integration
```

Option B: pytest option
```bash
pytest tests/integration -v -m integration --real-log-file=/absolute/path/to/your.rlog.zst
```

Notes:
- If neither CLI nor env is provided and the fixture is present, tests will use the fixture. If no fixture is present, tests are skipped automatically.
- Ensure Git LFS is installed locally to fetch the fixture (`git lfs install`).
- To also test dependency bootstrap, keep `openpilot/` checked out next to `comma-tools/` or pass `--repo-root` to the CLI.

For more detailed information, see the [full documentation](https://anteew.github.io/comma-tools/).

## Release Notes

### v0.8.0 - Exports/Reporting v1

Major release adding comprehensive CSV/JSON export functionality and HTML report generation. See [CHANGELOG.md](CHANGELOG.md) for complete details.

**New Export Features:**
- Professional CSV exports with versioned schemas
- JSON exports with parallel data structure  
- HTML analysis reports with embedded styling
- Metadata headers with analysis reproducibility
- Engaged interval processing and filtering

**Usage:**
```bash
cruise-control-analyzer logfile.zst --export-csv --export-json --output-dir results/
```

See [examples/sample_reports/](examples/sample_reports/) for example outputs.

## License

MIT License - see LICENSE file for details.
