Knowledge Base
==============

This section contains technical background information and explanations for understanding the comma.ai ecosystem and CAN bus analysis.

OpenPilot Architecture
----------------------

For detailed information about OpenPilot's architecture and control systems, see the knowledge base files:

- :doc:`../knowledge/openpilot/architecture`
- :doc:`../knowledge/openpilot/control_allowed`

CAN Bus Analysis
----------------

Understanding CAN Messages
~~~~~~~~~~~~~~~~~~~~~~~~~~

Controller Area Network (CAN) is the primary communication protocol used in modern vehicles. Each message consists of:

- **Address/ID**: Unique identifier for the message type
- **Data**: 0-8 bytes of payload data
- **Timestamp**: When the message was received

Subaru CAN Addresses
~~~~~~~~~~~~~~~~~~~~

The most important CAN addresses for Subaru vehicles:

.. list-table::
   :header-rows: 1

   * - Address (Hex)
     - Address (Dec)
     - Description
     - Data Format
   * - 0x13A
     - 314
     - Wheel Speeds
     - 4x 13-bit wheel speed values
   * - 0x146
     - 326
     - Cruise Control Buttons
     - Button state bits
   * - 0x241
     - 577
     - Cruise Control Status
     - Set speed and activation flags
   * - 0x220
     - 544
     - ES_Brake
     - Brake system status
   * - 0x390
     - 912
     - Dashlights
     - Turn signal and indicator states

Safety Systems
--------------

Panda Safety Model
~~~~~~~~~~~~~~~~~~

The Panda device implements safety checks to prevent unsafe vehicle control:

- **Controls Allowed**: Whether the system can send control commands
- **RX Checks**: Validation of incoming CAN messages
- **Safety Model**: Vehicle-specific safety configuration

For detailed safety information, see :doc:`../knowledge/openpilot/control_allowed`.

Development Workflow
--------------------

Testing with Real Logs
~~~~~~~~~~~~~~~~~~~~~~~

The repository includes integration tests that work with real openpilot log files:

.. code-block:: bash

   # Use the included test fixture
   pytest tests/integration -v -m integration

   # Use your own log file
   LOG_FILE=/path/to/your.rlog.zst pytest tests/integration -v -m integration

Dependency Management
~~~~~~~~~~~~~~~~~~~~~

The tools use a local dependency cache to avoid conflicts with system packages:

.. code-block:: bash

   # First run installs dependencies locally
   cruise-control-analyzer logfile.zst --install-missing-deps

   # Subsequent runs use cached dependencies
   cruise-control-analyzer logfile.zst

Common Issues
-------------

Environment Setup
~~~~~~~~~~~~~~~~~

If you encounter import errors:

1. Ensure openpilot is cloned alongside comma-tools
2. Use ``--repo-root`` to specify the parent directory
3. Install missing dependencies with ``--install-missing-deps``

Log File Compatibility
~~~~~~~~~~~~~~~~~~~~~~

- Log files must be in ``.zst`` (Zstandard) format
- Files should contain CAN message data
- Some tools require specific message types (e.g., wheel speeds for speed analysis)

Performance Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~~

- Large log files may take several minutes to process
- Use time windows (``--window-start``, ``--window-dur``) to focus analysis
- Consider converting to CSV for repeated analysis of the same data

Further Reading
---------------

- `OpenPilot Documentation <https://github.com/commaai/openpilot>`_
- `CAN Bus Protocol Overview <https://en.wikipedia.org/wiki/CAN_bus>`_
- `Subaru DBC Files <https://github.com/commaai/opendbc>`_
